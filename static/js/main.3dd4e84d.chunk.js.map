{"version":3,"sources":["common/index.ts","recoil/index.ts","recoil/selector.ts","recoil/wallet.ts","hooks/card.ts","hooks/client.ts","libs/api/index.ts","hooks/chain.ts","components/container.tsx","components/form.tsx","hooks/form.ts","libs/scripts/index.ts","components/metaData.tsx","components/proposal.tsx","components/session.tsx","components/request.tsx","hooks/request.ts","App.tsx","hooks/wallet.ts","hooks/subscribe.ts","hooks/persisted.ts","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_CHAINS","DEFAULT_EIP155_METHODS","DEFAULT_APP_METADATA","name","description","url","icons","chainsState","atom","key","default","chainDataState","jsonRpcState","sessionState","requestListState","cardState","type","isConnectedState","selector","get","length","accountListState","useCard","client","setCardValues","useSetRecoilState","openRequest","requestEvent","a","session","topic","peer","data","resetCard","useSession","cardValues","useRecoilValue","accountList","setSessions","approveSession","proposal","console","log","accounts","filter","account","split","namespace","reference","chainId","permissions","blockchain","chains","includes","approve","response","state","metadata","getAppMetadata","rejectSession","reject","ping","disconnect","reason","ERROR","USER_DISCONNECTED","format","api","axios","create","baseURL","timeout","headers","Accept","apiGetChainNamespace","apiGetChainJsonRpc","getAllNamespaces","namespaces","forEach","push","Container","children","className","Form","useForm","register","handleSubmit","reset","onSubmit","pair","uri","useUrlForm","required","getChainName","chain","chainData","replace","eip155","MetaData","src","alt","width","height","href","target","rel","Proposal","proposer","map","item","jsonrpc","methods","onClick","Session","sessions","requestList","index","request","method","Request","wallet","setRequestList","removeFromPending","x","id","approveRequest","result","formatJsonRpcResult","respond","formatJsonRpcError","message","rejectRequest","error","JSONRPC_REQUEST_METHOD_REJECTED","useRequest","Array","isArray","params","App","args","useState","setState","useEffect","WalletConnectClient","init","controller","relayProvider","apiKey","process","logger","debug","undefined","useClientValue","setAccountList","Wallet","getAccounts","useWallet","isConnected","cardData","setChainData","newChainData","Promise","all","useChainDataEffect","setJsonRpc","rpc","useChainJsonRpcEffect","jsonRpc","useRecoilState","requests","setRequests","respondRequest","useCallback","subscribe","on","CLIENT_EVENTS","supportedNamespaces","unsupportedChains","unsupportedMethods","sign","created","values","deleted","useSubscribeEffect","checkPersistedState","history","pending","useCheckPersistedEffect","Wrap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3dd4e84d.chunk.js","sourcesContent":["export const DEFAULT_MAIN_CHAINS = [\n  // mainnets\n  'eip155:1',\n  'eip155:10',\n  'eip155:100',\n  'eip155:137',\n  'eip155:42161',\n  'eip155:42220',\n];\n\nexport const DEFAULT_TEST_CHAINS = [\n  // testnets\n  'eip155:42',\n  'eip155:69',\n  'eip155:80001',\n  'eip155:421611',\n  'eip155:44787',\n];\n\nexport const DEFAULT_CHAINS = [...DEFAULT_MAIN_CHAINS, ...DEFAULT_TEST_CHAINS];\nexport const DEFAULT_EIP155_METHODS = ['eth_sendTransaction', 'personal_sign', 'eth_signTypedData'];\n\nexport const DEFAULT_APP_METADATA = {\n  name: 'React Test Wallet',\n  description: 'React Wallet for WalletConnect',\n  url: 'https://walletconnect.org/',\n  icons: [\n    'https://firebasestorage.googleapis.com/v0/b/nextc-sandbox.appspot.com/o/TestWalletIcon.png?alt=media&token=52e19829-dc99-4de8-b033-5efb0774b4ca',\n  ],\n};\n","import { atom } from 'recoil';\nimport type { SessionTypes } from '@walletconnect/types';\nimport type { CardStateType, ChainJsonRpc, ChainNamespaces } from '../types';\nimport { DEFAULT_CHAINS } from '../common';\n\nexport const chainsState = atom({\n  key: 'chainsState',\n  default: DEFAULT_CHAINS,\n});\n\nexport const chainDataState = atom({\n  key: 'chainDataState',\n  default: {} as ChainNamespaces,\n});\n\nexport const jsonRpcState = atom({\n  key: 'jsonRpcState',\n  default: {} as Record<string, ChainJsonRpc>,\n});\n\nexport const sessionState = atom({\n  key: 'sessionState',\n  default: [] as SessionTypes.Created[],\n});\n\nexport const requestListState = atom({\n  key: 'requestListState',\n  default: [] as SessionTypes.RequestEvent[],\n});\n\nexport const cardState = atom({\n  key: 'cardState',\n  default: { type: 'default' } as CardStateType,\n});\n","import { selector } from 'recoil';\nimport { sessionState } from './';\n\nexport const isConnectedState = selector({\n  key: 'isConnectedStat',\n  get: ({ get }) => {\n    const list = get(sessionState);\n\n    return list.length > 0 ? true : false;\n  },\n});\n","import { atom } from 'recoil';\n\nexport const accountListState = atom({\n  key: 'accountListState',\n  default: [] as string[],\n});\n","import type WalletConnectClient from '@walletconnect/client';\nimport type { SessionTypes } from '@walletconnect/types';\nimport { useSetRecoilState } from 'recoil';\nimport { cardState } from '../recoil';\n\nexport const useCard = (client: WalletConnectClient | null) => {\n  const setCardValues = useSetRecoilState(cardState);\n\n  const openRequest = (requestEvent: SessionTypes.RequestEvent) => async () => {\n    if (client === null) return;\n\n    const { peer } = await client.session.get(requestEvent.topic);\n    setCardValues({ type: 'request', data: { requestEvent, peer } });\n  };\n\n  const resetCard = () => {\n    setCardValues({ type: 'default' });\n  };\n\n  return {\n    openRequest,\n    resetCard,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport WalletConnectClient from '@walletconnect/client';\nimport { ERROR, getAppMetadata } from '@walletconnect/utils';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { cardState, sessionState } from '../recoil';\nimport { accountListState } from '../recoil/wallet';\nimport { useCard } from './card';\nimport { DEFAULT_APP_METADATA } from '../common';\n\ntype Args = {\n  debug?: boolean;\n};\n\nexport const useClientValue = (args?: Args) => {\n  const [state, setState] = useState<WalletConnectClient | null>(null);\n\n  useEffect(() => {\n    if (state === null) {\n      (async () => {\n        const client = await WalletConnectClient.init({\n          controller: true,\n          relayProvider: 'wss://relay.walletconnect.org',\n          apiKey: process.env.REACT_APP_API_KEY,\n          metadata: DEFAULT_APP_METADATA,\n          logger: args?.debug ? 'debug' : undefined,\n        });\n\n        setState(client);\n      })();\n    }\n  }, [state]);\n\n  return state;\n};\n\nexport const useSession = (client: WalletConnectClient | null) => {\n  const cardValues = useRecoilValue(cardState);\n  const accountList = useRecoilValue(accountListState);\n\n  const setSessions = useSetRecoilState(sessionState);\n\n  const { resetCard } = useCard(client);\n\n  const approveSession = async () => {\n    if (client === null) return;\n    if (!accountList.length) return;\n\n    if (cardValues.type === 'proposal') {\n      const proposal = cardValues.data.proposal;\n\n      console.log('ACTION', 'approveSession');\n\n      const accounts = accountList.filter((account) => {\n        const [namespace, reference] = account.split(':');\n        const chainId = `${namespace}:${reference}`;\n        return proposal.permissions.blockchain.chains.includes(chainId);\n      });\n\n      const session = await client.approve({\n        proposal,\n        response: { state: { accounts }, metadata: getAppMetadata() || DEFAULT_APP_METADATA },\n      });\n\n      resetCard();\n      setSessions([session]);\n    }\n  };\n\n  const rejectSession = async () => {\n    if (client === null) return;\n\n    if (cardValues.type === 'proposal') {\n      const proposal = cardValues.data.proposal;\n\n      console.log('ACTION', 'rejectSession');\n\n      await client.reject({ proposal });\n      resetCard();\n    }\n  };\n\n  const disconnect = (topic: string) => async () => {\n    if (client === null) return;\n\n    console.log('ACTION', 'disconnect');\n\n    await client.disconnect({ topic, reason: ERROR.USER_DISCONNECTED.format() });\n  };\n\n  const ping = (topic: string) => async () => {\n    if (client === null) return;\n\n    try {\n      await client.ping({ topic });\n    } catch {\n      console.log('not connected');\n    }\n  };\n\n  return {\n    approveSession,\n    rejectSession,\n    ping,\n    disconnect,\n  };\n};\n","import axios, { AxiosInstance } from 'axios';\n\nimport { ChainData, ChainsMap, ChainJsonRpc } from '../../types';\n\nconst api: AxiosInstance = axios.create({\n  baseURL: 'https://blockchain-api.xyz',\n  timeout: 30000, // 30 secs\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport async function apiGetChainData(chainId: string): Promise<ChainData> {\n  const { data } = await api.get<ChainData>(`/api/chain/${chainId}`);\n  return data;\n}\n\nexport async function apiGetChainNamespace(namespace: string): Promise<ChainsMap> {\n  const { data } = await api.get<ChainsMap>(`/api/namespace/${namespace}`);\n  return data;\n}\n\nexport async function apiGetChainJsonRpc(chainId: string): Promise<ChainJsonRpc> {\n  const { data } = await api.get<ChainJsonRpc>(`/api/jsonrpc/${chainId}`);\n  return data;\n}\n","import { useEffect } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { chainDataState, chainsState, jsonRpcState } from '../recoil';\nimport type { ChainJsonRpc, ChainNamespaces, ChainsMap } from '../types';\nimport { apiGetChainJsonRpc, apiGetChainNamespace } from '../libs/api';\n\nconst getAllNamespaces = (chains: string[]) => {\n  const namespaces: string[] = [];\n\n  chains.forEach((chainId) => {\n    const [namespace] = chainId.split(':');\n    if (!namespaces.includes(namespace)) {\n      namespaces.push(namespace);\n    }\n  });\n\n  return namespaces;\n};\n\nexport const useChainDataEffect = () => {\n  const chains = useRecoilValue(chainsState);\n\n  const setChainData = useSetRecoilState(chainDataState);\n\n  useEffect(() => {\n    (async () => {\n      const namespaces = getAllNamespaces(chains);\n      const newChainData: ChainNamespaces = {};\n\n      await Promise.all(\n        namespaces.map(async (namespace) => {\n          let chains: ChainsMap | undefined;\n\n          try {\n            chains = await apiGetChainNamespace(namespace);\n          } catch (e) {\n            console.error(e as any);\n          }\n\n          if (chains) {\n            newChainData[namespace] = chains;\n          }\n        }),\n      );\n\n      setChainData({ ...newChainData });\n    })();\n  }, []);\n};\n\nexport const useChainJsonRpcEffect = () => {\n  const chains = useRecoilValue(chainsState);\n  const setJsonRpc = useSetRecoilState(jsonRpcState);\n\n  useEffect(() => {\n    (async () => {\n      const namespaces = getAllNamespaces(chains);\n      const jsonrpc: Record<string, ChainJsonRpc> = {};\n\n      await Promise.all(\n        namespaces.map(async (namespace) => {\n          let rpc: ChainJsonRpc | undefined;\n          try {\n            rpc = await apiGetChainJsonRpc(namespace);\n          } catch (e) {\n            console.log(e as any);\n          }\n\n          if (typeof rpc !== 'undefined') {\n            jsonrpc[namespace] = rpc;\n          }\n        }),\n      );\n\n      setJsonRpc({ ...jsonrpc });\n    })();\n  }, []);\n};\n","type Props = {\n  children: React.ReactChild;\n};\n\nexport const Container: React.VFC<Props> = ({ children }: Props) => (\n  <div className=\"h-screen w-screen\">\n    <div className=\"container h-full px-4 mx-auto\">\n      <div className=\"flex justify-center items-center h-20\">\n        <h1 className=\"text-2xl font-bold\">Wallet</h1>\n      </div>\n\n      <div className=\"main-content pb-10\">{children}</div>\n    </div>\n  </div>\n);\n","import type WalletConnectClient from '@walletconnect/client';\nimport { useUrlForm } from '../hooks/form';\n\ntype Props = {\n  client: WalletConnectClient | null;\n};\n\nexport const Form: React.VFC<Props> = ({ client }: Props) => {\n  const { register, onSubmit } = useUrlForm(client);\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex flex-col justify-center items-center pt-10\">\n      <input\n        {...register('uri', { required: true })}\n        className=\"w-80 h-10 bg-gray-100 px-2 border border-gray-900 rounded\"\n      />\n\n      <button type=\"reset\" className=\"flex justify-center items-center mt-4 hover:opacity-50\">\n        <span className=\"text-lg text-black font-bold leading-none\">reset</span>\n      </button>\n\n      <button\n        type=\"submit\"\n        className=\"flex justify-center items-center h-10 w-40 bg-green-500 rounded-3xl mt-5 hover:opacity-80 shadow\"\n      >\n        <span className=\"text-lg text-white font-bold leading-none\">pairing</span>\n      </button>\n    </form>\n  );\n};\n","import { useForm } from 'react-hook-form';\nimport type WalletConnectClient from '@walletconnect/client';\n\ntype FormData = {\n  uri: string;\n};\n\nexport const useUrlForm = (client: WalletConnectClient | null) => {\n  const { register, handleSubmit, reset } = useForm<FormData>();\n\n  const onSubmit = handleSubmit((data) => {\n    if (client === null) return;\n\n    client.pair({ uri: data.uri });\n    reset();\n  });\n\n  return {\n    register,\n    onSubmit,\n    reset,\n  };\n};\n","import { ChainNamespaces } from '../../types';\n\nexport const getChainName = (chain: string, chainData: ChainNamespaces) => {\n  const chainId = chain.replace('eip155:', '');\n  return chainData.eip155[chainId] ? chainData.eip155[chainId].name : '';\n};\n","type Props = {\n  icons: string[];\n  name: string;\n  url: string;\n  description: string;\n};\n\nexport const MetaData: React.VFC<Props> = ({ icons, name, url, description }: Props) => {\n  return (\n    <div className=\"w-80 pt-2\">\n      <p className=\"text-lg font-bold\">App</p>\n\n      <div className=\"w-full pt-2\">\n        <div className=\"flex w-full\">\n          <img\n            src={icons[0]}\n            alt=\"icon\"\n            width={48}\n            height={48}\n            className=\"border-2 rounded-lg shadow\"\n          />\n\n          <div className=\"pl-2\">\n            <p className=\"text-sm font-bold\">{name}</p>\n\n            <a className=\"text-sm text-blue-400\" href={url} target=\"_blank\" rel=\"noreferrer\">\n              App\n            </a>\n          </div>\n        </div>\n\n        <div className=\"w-full pt-1\">\n          <p>{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import type WalletConnectClient from '@walletconnect/client';\nimport { useRecoilValue } from 'recoil';\nimport { cardState, chainDataState } from '../recoil';\nimport { useSession } from '../hooks/client';\nimport { getChainName } from '../libs/scripts';\nimport { MetaData } from '../components/metaData';\n\ntype Props = {\n  client: WalletConnectClient | null;\n};\n\nexport const Proposal: React.VFC<Props> = ({ client }: Props) => {\n  const chainData = useRecoilValue(chainDataState);\n  const cardValues = useRecoilValue(cardState);\n\n  const { approveSession, rejectSession } = useSession(client);\n\n  if (\n    cardValues.type !== 'proposal' ||\n    !cardValues.data ||\n    !cardValues.data.proposal ||\n    !cardValues.data.proposal.permissions ||\n    !cardValues.data.proposal.permissions.blockchain ||\n    !cardValues.data.proposal.permissions.blockchain.chains ||\n    !cardValues.data.proposal.permissions.blockchain.chains[0] ||\n    !cardValues.data.proposal.proposer ||\n    !cardValues.data.proposal.proposer.metadata\n  ) {\n    return <></>;\n  }\n\n  const { proposer, permissions } = cardValues.data.proposal;\n\n  return (\n    <div className=\"flex flex-col justify-center items-center pt-10\">\n      <h2 className=\"text-2xl font-bold\">proposal</h2>\n\n      <MetaData {...proposer.metadata} />\n\n      <div className=\"w-80 pt-5\">\n        <p className=\"text-lg font-bold\">Chains</p>\n\n        <ul className=\"list-disc list-inside\">\n          {permissions.blockchain.chains.map((item) => (\n            <li key={`chain_${item}`}>\n              <span>{getChainName(item, chainData)}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"w-80 pt-5\">\n        <p className=\"text-lg font-bold\">Chains</p>\n\n        {/* <p>{cardValues.data.proposal}</p> */}\n      </div>\n\n      <div className=\"w-80 pt-5\">\n        <p className=\"text-lg font-bold\">Methods</p>\n\n        <ul className=\"list-disc list-inside\">\n          {permissions.jsonrpc.methods.map((item) => (\n            <li key={item}>\n              <span>{item}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"flex justify-between items-center w-80 pt-5\">\n        <button\n          onClick={approveSession}\n          className=\"flex justify-center items-center h-8 w-24 bg-blue-600 rounded-2xl shadow hover:opacity-80\"\n        >\n          <span className=\"text-white text-base font-bold leading-none pb-0.5\">approve</span>\n        </button>\n\n        <button\n          onClick={rejectSession}\n          className=\"flex justify-center items-center h-8 w-24 bg-red-500 rounded-2xl shadow hover:opacity-80\"\n        >\n          <span className=\"text-white text-base font-bold leading-none pb-0.5\">reject</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import type WalletConnectClient from '@walletconnect/client';\nimport { useRecoilValue } from 'recoil';\nimport { chainDataState, requestListState, sessionState } from '../recoil';\nimport { useSession } from '../hooks/client';\nimport { useCard } from '../hooks/card';\nimport { getChainName } from '../libs/scripts';\nimport { MetaData } from '../components/metaData';\n\ntype Props = {\n  client: WalletConnectClient | null;\n};\n\nexport const Session: React.VFC<Props> = ({ client }: Props) => {\n  const chainData = useRecoilValue(chainDataState);\n  const sessions = useRecoilValue(sessionState);\n  const requestList = useRecoilValue(requestListState);\n\n  const { ping, disconnect } = useSession(client);\n  const { openRequest } = useCard(client);\n\n  if (\n    !sessions ||\n    !sessions.length ||\n    !sessions[0] ||\n    !sessions[0].permissions ||\n    !sessions[0].permissions.blockchain\n  ) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"flex flex-col justify-center items-center pt-10\">\n      <h2 className=\"text-2xl font-bold\">Session</h2>\n\n      <MetaData {...sessions[0].peer.metadata} />\n\n      <div className=\"w-80 pt-2\">\n        <p className=\"text-lg font-bold\">Accounts</p>\n\n        <ul className=\"list-disc list-inside w-full\">\n          {sessions[0].state.accounts.map((item, index) => (\n            <li\n              key={`account_${item}_${index}`}\n              className={`\n                w-full\n                ${index === 0 ? 'pt-1' : 'pt-4'}\n              `}\n            >\n              {getChainName(item.split(':')[1], chainData)}\n              <span className=\"block\">{item.split(':')[2]}</span>\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"w-80 pt-2\">\n        <p className=\"text-lg font-bold\">Networks</p>\n\n        <ul className=\"list-disc list-inside\">\n          {sessions[0].permissions.blockchain.chains.map((item) => (\n            <li key={`chain_${item}`}>{getChainName(item, chainData)}</li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"w-80 pt-5\">\n        <p className=\"text-lg font-bold\">Requests</p>\n\n        {requestList.length > 0 ? (\n          <ul className=\"w-full list-disc list-inside\">\n            {requestList.map((item) => (\n              <li key={`request_${item.topic}`} className=\"w-full\">\n                <span>{item.chainId && getChainName(item.chainId, chainData)}</span>\n\n                <button\n                  onClick={openRequest(item)}\n                  className=\"relative w-full h-8 border border-blue-600 rounded-lg text-blue-600 text-lg font-bold ml-4 hover:bg-blue-600 hover:text-white\"\n                >\n                  <span className=\"flex h-3 w-3 absolute top-2 left-3\">\n                    <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-blue-400 opacity-75\"></span>\n                    <span className=\"relative inline-flex rounded-full h-3 w-3 bg-blue-600\"></span>\n                  </span>\n\n                  {item.request.method}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-gray-400 text-base text-center pt-6\">none</p>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center w-80 pt-20\">\n        <button className=\"flex justify-center items-center w-20 h-8 bg-white border border-gray-500 rounded-full shadow hover:opacity-80\">\n          <span className=\"text-base leading-none\">ping</span>\n        </button>\n\n        <button\n          className=\"flex justify-center items-center w-40 h-8 bg-red-400 rounded-full shadow hover:opacity-80\"\n          onClick={disconnect(sessions[sessions.length - 1].topic)}\n        >\n          <span className=\"text-white text-base leading-none\">disconnect!</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import type WalletConnectClient from '@walletconnect/client';\nimport type Wallet from 'caip-wallet';\nimport { useRecoilValue } from 'recoil';\nimport { cardState, chainDataState } from '../recoil';\nimport { useRequest } from '../hooks/request';\nimport { getChainName } from '../libs/scripts';\nimport { MetaData } from '../components/metaData';\n\ntype Props = {\n  client: WalletConnectClient | null;\n  wallet: Wallet | null;\n};\n\nexport const Request: React.VFC<Props> = ({ client, wallet }: Props) => {\n  const cardValues = useRecoilValue(cardState);\n  const chainData = useRecoilValue(chainDataState);\n\n  const { approveRequest, rejectRequest } = useRequest(client, wallet);\n\n  if (cardValues.type !== 'request') {\n    return <></>;\n  }\n\n  const { request, chainId } = cardValues.data.requestEvent;\n\n  return (\n    <div className=\"flex flex-col justify-center items-center pt-10\">\n      <h2 className=\"text-2xl font-bold\">Request</h2>\n\n      <MetaData {...cardValues.data.peer.metadata} />\n\n      {chainId && (\n        <div className=\"w-80 pt-5\">\n          <h3 className=\"text-lg font-bold\">Chain</h3>\n          <p>\n            {getChainName(chainId, chainData)} ({chainId})\n          </p>\n        </div>\n      )}\n\n      <div className=\"w-80 pt-5\">\n        <h3 className=\"text-lg font-bold\">ID</h3>\n        <p>{request.id}</p>\n      </div>\n\n      <div className=\"w-80 pt-5\">\n        <h3 className=\"text-lg font-bold\">Methods</h3>\n\n        <p>{request.method}</p>\n      </div>\n\n      <div className=\"w-80 pt-5\">\n        <h3 className=\"text-lg font-bold\">Params</h3>\n\n        {Array.isArray(request.params as string[]) ? (\n          <ul className=\"w-full whitespace-normal\">\n            {(request.params as string[]).map((item, index) => (\n              <li key={`request_param_${item}_${index}`} className=\"w-80 pt-2\">\n                <p className=\"break-all\">{item}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>{request.params}</p>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-center w-80 pt-5 pb-10\">\n        <button\n          onClick={approveRequest}\n          className=\"flex justify-center items-center h-8 w-24 bg-blue-600 rounded-2xl shadow hover:opacity-80\"\n        >\n          <span className=\"text-white text-base font-bold leading-none pb-0.5\">approve</span>\n        </button>\n\n        <button\n          onClick={rejectRequest}\n          className=\"flex justify-center items-center h-8 w-24 bg-red-500 rounded-2xl shadow hover:opacity-80\"\n        >\n          <span className=\"text-white text-base font-bold leading-none pb-0.5\">reject</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import type WalletConnectClient from '@walletconnect/client';\nimport { ERROR } from '@walletconnect/utils';\nimport type { SessionTypes } from '@walletconnect/types';\nimport type Wallet from 'caip-wallet';\nimport { formatJsonRpcError, formatJsonRpcResult } from '@json-rpc-tools/utils';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { cardState, chainsState, requestListState } from '../recoil';\nimport { useCard } from './card';\n\nexport const useRequest = (client: WalletConnectClient | null, wallet: Wallet | null) => {\n  const chains = useRecoilValue(chainsState);\n  const cardValues = useRecoilValue(cardState);\n  const requestList = useRecoilValue(requestListState);\n  const setRequestList = useSetRecoilState(requestListState);\n\n  const { resetCard } = useCard(client);\n\n  const removeFromPending = async (requestEvent: SessionTypes.RequestEvent) => {\n    setRequestList(requestList.filter((x) => x.request.id !== requestEvent.request.id));\n  };\n\n  const approveRequest = async () => {\n    if (client === null) return;\n    if (wallet === null) return;\n\n    if (cardValues.type === 'request') {\n      const { requestEvent } = cardValues.data;\n\n      try {\n        const chainId = requestEvent.chainId || chains[0];\n        const result = await wallet.request(requestEvent.request as any, { chainId });\n        const response = formatJsonRpcResult(requestEvent.request.id, result);\n        client.respond({\n          topic: requestEvent.topic,\n          response,\n        });\n      } catch (e) {\n        console.log(e);\n        const response = formatJsonRpcError(requestEvent.request.id, (e as any).message);\n        client.respond({ topic: requestEvent.topic, response });\n      }\n\n      await removeFromPending(requestEvent);\n      resetCard();\n    }\n  };\n\n  const rejectRequest = async () => {\n    if (client === null) return;\n\n    if (cardValues.type === 'request') {\n      const { requestEvent } = cardValues.data;\n\n      const error = ERROR.JSONRPC_REQUEST_METHOD_REJECTED.format();\n      const response = {\n        id: requestEvent.request.id,\n        jsonrpc: requestEvent.request.jsonrpc,\n        error,\n      };\n      client.respond({ topic: requestEvent.topic, response });\n\n      await removeFromPending(requestEvent);\n      resetCard();\n    }\n  };\n\n  return {\n    approveRequest,\n    rejectRequest,\n  };\n};\n","import { useRecoilValue } from 'recoil';\nimport { cardState } from './recoil';\nimport { isConnectedState } from './recoil/selector';\nimport { useClientValue } from './hooks/client';\nimport { useWallet } from './hooks/wallet';\nimport { useChainDataEffect, useChainJsonRpcEffect } from './hooks/chain';\nimport { useSubscribeEffect } from './hooks/subscribe';\nimport { useCheckPersistedEffect } from './hooks/persisted';\nimport { Container } from './components/container';\nimport { Form } from './components/form';\nimport { Proposal } from './components/proposal';\nimport { Session } from './components/session';\nimport { Request } from './components/request';\n\nconst App: React.VFC = () => {\n  const client = useClientValue();\n  const wallet = useWallet();\n\n  const isConnected = useRecoilValue(isConnectedState);\n  const cardData = useRecoilValue(cardState);\n\n  useChainDataEffect();\n  useChainJsonRpcEffect();\n  useSubscribeEffect(client, wallet);\n  useCheckPersistedEffect(client);\n\n  if (cardData.type === 'request') {\n    return <Request client={client} wallet={wallet} />;\n  }\n\n  if (cardData.type === 'proposal') {\n    return <Proposal client={client} />;\n  }\n\n  if (isConnected) {\n    return <Session client={client} />;\n  }\n\n  // Initial Screen\n  return <Form client={client} />;\n};\n\nconst Wrap: React.VFC = () => (\n  <Container>\n    <App />\n  </Container>\n);\n\nexport default Wrap;\n","import { useEffect, useState } from 'react';\nimport Wallet from 'caip-wallet';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { chainsState } from '../recoil';\nimport { accountListState } from '../recoil/wallet';\n\nexport const useWallet = () => {\n  const chains = useRecoilValue(chainsState);\n  const setAccountList = useSetRecoilState(accountListState);\n\n  const [state, setState] = useState<Wallet | null>(null);\n\n  useEffect(() => {\n    if (state === null) {\n      (async () => {\n        const wallet = await Wallet.init({ chains });\n        setState(wallet);\n\n        const accountList = await wallet.getAccounts();\n        if (accountList) {\n          setAccountList([...accountList]);\n        }\n      })();\n    }\n  }, []);\n\n  return state;\n};\n","import { useCallback, useEffect } from 'react';\nimport WalletConnectClient, { CLIENT_EVENTS } from '@walletconnect/client';\nimport { SessionTypes } from '@walletconnect/types';\nimport { formatJsonRpcError, formatJsonRpcResult, JsonRpcResponse } from '@json-rpc-tools/utils';\nimport type Wallet from 'caip-wallet';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { cardState, chainsState, jsonRpcState, requestListState, sessionState } from '../recoil';\nimport { DEFAULT_EIP155_METHODS } from '../common';\n\nexport const useSubscribeEffect = (client: WalletConnectClient | null, wallet: Wallet | null) => {\n  const chains = useRecoilValue(chainsState);\n  const jsonRpc = useRecoilValue(jsonRpcState);\n\n  const setSessions = useSetRecoilState(sessionState);\n  const setCardValues = useSetRecoilState(cardState);\n  const [requests, setRequests] = useRecoilState(requestListState);\n\n  const respondRequest = useCallback(\n    async (topic: string, response: JsonRpcResponse) => {\n      if (client === null) return;\n\n      await client.respond({ topic, response });\n    },\n    [client],\n  );\n\n  useEffect(() => {\n    const subscribe = async () => {\n      if (client === null) return;\n\n      // Proposal\n      client.on(CLIENT_EVENTS.session.proposal, async (proposal: SessionTypes.Proposal) => {\n        console.log('EVENT', 'session_proposal');\n\n        const supportedNamespaces: string[] = [];\n        chains.forEach((chainId) => {\n          const [namespace] = chainId.split(':');\n          if (!supportedNamespaces.includes(namespace)) {\n            supportedNamespaces.push(namespace);\n          }\n        });\n\n        const unsupportedChains: string[] = [];\n        proposal.permissions.blockchain.chains.forEach((chainId) => {\n          if (chains.includes(chainId)) return;\n          unsupportedChains.push(chainId);\n        });\n\n        if (unsupportedChains.length) {\n          return client.reject({ proposal });\n        }\n\n        const unsupportedMethods: string[] = [];\n        proposal.permissions.jsonrpc.methods.forEach((method) => {\n          if (supportedNamespaces.includes('eip155') && DEFAULT_EIP155_METHODS.includes(method)) {\n            return;\n          }\n          unsupportedMethods.push(method);\n        });\n\n        if (unsupportedMethods.length) {\n          return client.reject({ proposal });\n        }\n\n        setCardValues({ type: 'proposal', data: { proposal } });\n      });\n\n      // Request\n      client.on(CLIENT_EVENTS.session.request, async (requestEvent: SessionTypes.RequestEvent) => {\n        if (wallet === null) return;\n\n        console.log('EVENT', 'session_request', requestEvent.request);\n\n        const chainId = requestEvent.chainId || chains[0];\n        const [namespace] = chainId.split(':');\n        try {\n          const requiresApproval = jsonRpc[namespace].methods.sign.includes(\n            requestEvent.request.method,\n          );\n\n          if (requiresApproval) {\n            setRequests([...requests, requestEvent]);\n          } else {\n            const result = await wallet.request(requestEvent.request, { chainId });\n            const response = formatJsonRpcResult(requestEvent.request.id, result);\n            await respondRequest(requestEvent.topic, response);\n          }\n        } catch (e) {\n          console.log(e);\n\n          const response = formatJsonRpcError(requestEvent.request.id, (e as any).message);\n          await respondRequest(requestEvent.topic, response);\n        }\n      });\n\n      // Created\n      client.on(CLIENT_EVENTS.session.created, async () => {\n        console.log('EVENT', 'session_created');\n\n        setSessions(client.session.values);\n      });\n\n      // Deleted\n      client.on(CLIENT_EVENTS.session.deleted, async () => {\n        console.log('EVENT', 'session_deleted');\n\n        setSessions(client.session.values);\n      });\n    };\n\n    if (client !== null) {\n      console.log('run start');\n      subscribe();\n    }\n  }, [client]);\n};\n","import { useEffect } from 'react';\nimport type WalletConnectClient from '@walletconnect/client';\nimport { useSetRecoilState } from 'recoil';\nimport { requestListState, sessionState } from '../recoil';\n\nexport const useCheckPersistedEffect = (client: WalletConnectClient | null) => {\n  const setSessions = useSetRecoilState(sessionState);\n  const setRequests = useSetRecoilState(requestListState);\n\n  useEffect(() => {\n    const checkPersistedState = async () => {\n      if (client === null) return;\n\n      console.log('ACTION', 'checkPersisted');\n\n      setRequests([...client.session.history.pending]);\n      setSessions([...client.session.values]);\n    };\n\n    if (client !== null) {\n      checkPersistedState();\n    }\n  }, [client]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}